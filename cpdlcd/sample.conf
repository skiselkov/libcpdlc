# This is a sample configuration file for cpdlcd. Feel free to modify
# as necessary to suit your needs.

# msglog = /var/log/cpdlcd.log
#
# Defines the file to which cpdlcd should log all incoming and outgoing
# messages. This file is always appended to. You can force the server
# to reopen the log file after a log rotation by sending SIGHUP to it.

# listen/tcp/<name> = hostname[:port]
#
# Defines a plain TCP listen interface. The "<name>" portion is any
# descriptive name you wish to use. Unless at least one TCP listen
# interface is defined, the default is to only listen on `localhost:17622'.
# The ":port" section is optional. Without it, the default TCP connection
# port of 17622 is used.
# To make the server listen on all hostnames, use "*" as the hostname.
# Example: listen/tcp/main = *

# listen/lws/<name> = interface[:port]
#
# Defines a libwebsocket listen interface. The "<name>" portion is any
# descriptive name you wish to use. Unless at least one LWS listen
# interface is defined, the default is to only listen on the loopback
# interface. Please note that unlike the `listen/tcp' directive, LWS
# needs a physical interface name instead of an IP hostname (e.g. "eth0").
# The ":port" section is optional. Without it, the default TCP connection
# port of 17622 is used.
# To make the server listen on all interfaces, use "*" as the interface.
# Example: listen/lws/main = *

# tls/keyfile = foo/cpdlcd_key.pem
#
# Defines the path to the server's private TLS key. The key must be stored
# in PEM format. It can be optionally encrypted, see the options below for
# how to deal with encrypted keys.
# If this directive is not provided, the key is assumed to be stored in
# a file named `cpdlcd_key.pem' in the current working directory.

# tls/keyfile_pass = DecryptionPassword
#
# Defines an optional private TLS key decryption password. If not specified,
# the TLS key is assumed to be stored unencrypted.

# tls/keyfile_enctype = PLAIN | 3DES | RC4 | ...
#
# Defines an optional private TLS key encryption type. If no `keyfile_pass'
# is set, this defaults to "PLAIN". If a `keyfile_pass' is set, the default
# value for the key encryption type is "AES256" (the default for OpenSSL).
# The full list of possible values is:
# "3DES" = PBES2/3DES
# "RC4" = PKCS12/ARCFOUR
# "AES128" = PBES2/AES128
# "AES192" = PBES2/AES192
# "AES256" = PBES2/AES256
# "PKCS12/3DES" = PKCS12/3DES

# tls/certfile = foo/cpdlcd_cert.pem
#
# Defines the path to the server's public TLS certificate. The certificate
# must be stored in PEM format. If this directive is not provided, the
# certificate is assumed to be stored in a file named `cpdlcd_cert.pem'
# in the current working directory.

# tls/cafile = foo/ca_cert.pem
#
# Defines the path to the CA certificate chain to send to connecting
# clients. If not specified, no CA certificates are sent to the client.
# The certificates must be stored in PEM format.

# tls/req_client_cert = true | false
#
# Sets whether the server requires client certificates. The default is
# "false". If client cerificates are used, they are checked against the
# CA certificate set in `tls/cafile' and optionally against the CRL set
# in `tls/crlfile'.

# tls/crlfile = foo/crl.list
#
# Defines the path to the certificate revocation list file. This is used
# when client certificates are in use to check for revoked certificates.
# If not specified, the CRL mechanism is not used.

# blocklist = foo/file.txt
#
# Defines the path to a file containing a list of IP addresses to be
# blocked by the server. The file is simply a sequence of IP addresses,
# one per line, with support for comments starting with a '#' character.
# This file is checked regularly for updates. If a change is detected
# to the file, the server re-reads it and drops any existing connections
# which are marked as blocked. Also, further connection attempts from
# these addresses are immediately dropped before even allowing a TLS
# handshake to commence.

# auth/rpc/url = https://hostname.com/auth_script
# auth/rpc/style = www-form|xmlrpc
#
# Defines a remote authenticator URL. Whenever a LOGON attempt is
# received, the server contacts the remote authenticator to process
# the LOGON authentication request. If you want to use file-based
# authentication instead, see "FILE BASED AUTHENTICATION" below.
#
# cpdlcd allows you to select from two RPC styles: www-form or xmlrpc
# You will also want to pass some arguments about the LOGON message
# that was received in the remote call. You can do so by specifying
# up to 32 "auth/rpc/param/<N>" parameters, where "<N>" is a number
# from 0 to 31. The value of this parameter must be one of the following:
#	FROM
#		The contents of the FROM= field in the original CPDLC LOGON
#		message. This will be the new identity assumed by the
#		connection if the LOGON succeeds.
#	TO
#		If present, the contents of the TO= field. This will be the
#		new implicit target for all messages from the client if the
#		LOGON succeeds.
#	LOGON
#		The contents of the LOGON= field. Its meaning is to be
#		interpreted by the remote authenticator, the cpdlcd server
#		makes no assumptions about the data.
#	ADDR
#		The remote host IP address which sent the LOGON message. This
#		can either be an IPv4 address or an IPv6 address, depending
#		on how the remote host connected to the server. The server
#		makes no distinctions between TLS and LWS connections for
#		the purposes of authentication.
#
# cpdlcd expects a response back consisting of two parameters:
#	- the first parameter defines whether the LOGON attempt was
#	  successful (1) or whether the server should fail the LOGON
#	  attempt (0).
#	- the second parameter tells cpdlcd whether the client
#	  connection should be treated as the connection from an ATC
#	  station (1) or an aircraft station (0). This defines the
#	  permissible message sets from the client and lets the server
#	  perform message flow logic checks.
# When using the www-form RPC style, these should simply be concatenated
# using a '&' character (e.g. "1&0"). When using the xmlrpc RPC style,
# return the values as an array of two booleans.
#
# EXAMPLES:
#
#   Using the "www-form" RPC style:
#
#	Configuration:
#		auth/rpc/style = www-form
#		auth/rpc/url = https://example.com/auth.php
#		auth/rpc/param/0 = FROM
#		auth/rpc/param/1 = TO
#		auth/rpc/param/2 = LOGON
#		auth/rpc/param/3 = ADDR
#
#	What the server will send to you in the HTTP POST body:
#		FROM=N123AB&TO=KUSA&LOGON=ABCD&ADDR=1.2.3.4:40000
#
#	Example of a valid response (allow LOGON, treat station as aircraft):
#		1&0
#
#   Using the "xmlrpc" RPC style:
#
#	Configuration:
#		auth/rpc/style = xmlrpc
#		auth/rpc/url = https://example.com/auth.php
#		auth/rpc/methodName = auth.getAuth
#		auth/rpc/param/0 = FROM
#		auth/rpc/param/1 = TO
#		auth/rpc/param/2 = LOGON
#		auth/rpc/param/3 = ADDR
#
#	What the server will send to you in the HTTP POST body:
#		<methodCall>
#		  <methodName>auth.getAuth</methodName>
#		  <params>
#		    <param><value>N123AB</value></param>
#		    <param><value>KUSA</value></param>
#		    <param><value>ACFT</value></param>
#		    <param><value>1.2.3.4:40000</value></param>
#		  </params>
#		</methodCall>
#
#	Example of a valid response:
#		<methodResponse>
#		  <params>
#		    <param>
#		      <value>
#		        <array>
#		          <data>
#		            <value><boolean>1</boolean></value>
#		            <value><boolean>0</boolean></value>
#		          </data>
#		        </array>
#		      </value>
#		    </param>
#		  </params>
#		</methodResponse>
# During development, you can specify "auth/rpc/debug = true". This
# will make cpdlcd dump the entire RPC response from the remote
# authenticator to stdout for analysis.

# FILE BASED AUTHENTICATION
#
# If you want to use a local file to hold logon names & passwords, use
# the file:// URL method instead. E.g.
# auth/rpc/url = file://./test.userlist
# auth/rpc/url = file:///etc/cpdlcd/test.userlist
# See the file sample.userlist included in this repo for an example on
# how that file is to be structured.

# cainfo = foo/cainfo.list
#
# Sets the path to the list of CAs that are used to verify the remote
# authenticator and message router TLS certificate in case the `https'
# connection schema was used. This is a list of CA certificates stored
# in a single file in PEM format.
# If not set, the default behavior is to use the operating system's
# CA certificate store (e.g. "/usr/share/ca-certificates" on Linux and
# "/Library/Keychains/System.keychain" on macOS).

# auth/username = MyUserName
#
# Sets the HTTP basic authentication username in case this is required
# by the remote authenticator interface.

# auth/password = MyPassword
#
# Sets the HTTP basic authentication password in case this is required
# by the remote authenticator interface.

# msgqueue/max = 128m
#
# In case a message cannot be immediately forwarded to the intended
# recipient, it is held by the server in a memory queue. This sets the
# maximum size of the memory queue before any further attempts to queue
# a message are denied with an error. The value is set in bytes, but
# you can use the standard suffixes for muplipliers: 'k' = kilobytes,
# 'm' = megabytes, 'g' = gigabytes, 't' = terabytes, 'e' = exabytes and
# 'p' = petabytes.
# If not specified, the default value for this limit is 128MB. Specifying
# a value of 0 for this parameter disables the global message queue limit.

# msgqueue/quota = 128k
#
# Applies a per-client-ID message quota to the delayed message
# forwarding queue. This is only applied to aircraft stations, not
# ATC stations (ATC stations can queue as many messages as they want,
# up to the msgqueue/max value). If an aircraft stations attempts to
# queue more than the set quota, the message is rejected. Undelivered
# messages are dropped after 10 minutes.
# If not specified, the default value for the quota is 16kB.

# logon_list_file = logons.txt
#
# When specified, cpdlcd will maintain an up-to-date list of currently
# active LOGONs to the server. This file will be updated atomically when
# a LOGON or LOGOFF occurs. The file contains a 5-column table using a
# single tab as a separator between each column. Each value is guaranteed to
# be free of whitespace. The columns have the following meaning from left
# to right:
#	1) The FROM identity (callsign).
#	2) The TO identity (callsign). For ATC stations that do not logon
#	   to any station, this field will contain a single '-' character.
#	3) The station type. For aircraft stations, the value is "ACFT".
#	   For ATC stations, the value is "ATC".
#	4) The remote IP address and port:
#	   For IPv4 addresses, the format is: A.B.C.D:12345
#	   For IPv6 addresses, the format is: [AB:CD::EF]:12345
#	5) The connection transport type. For TLS over plain TCP, the
#	   value is "TLS". For WebSockets, the value is "WS".
# Example aircraft station logon over IPv6/TLS:
# N650CL	KUSA	ACFT	[::1]:45866	TLS
# Example ATC station logon over IPv4/TLS:
# KZOA	-	ATC	127.0.0.1:45870	TLS

# logon_cmd = <shell command>
# logoff_cmd = <shell command>
#
# When these values are defined, when a LOGON or LOGOFF occurs, cpdlcd
# fork()s and runs the string in this configuration stanza as follows:
# /bin/sh -c "<shell command>"
# This can be used to execute custom code as a callback and track LOGONs
# and LOGOFFs. cpdlcd will not wait for the command to complete. You can
# use following special variables in the <shell command> string to provide
# additional information to the shell command:
#	FROM - expands to the identifier of the station logging on or off
#	TO - expands to the identifier that the station is logging on to,
#		or logging off from. For ATC stations, this expands to "-".
#	ADDR - expands to the connection's remote IP address, using the
#		same format as in the "logon_list_file" option above.
#	STATYPE - expands to the type of station logging on or off.
#		This will be "ACFT" for aircraft or "ATC" for ATC stations.
#	CONNTYPE - expands to the type of connection used.
#		This will be "WS" for websockets or "TLS" for TLS connections.
# Please note that these are NOT shell variables, but are instead expanded
# by cpdlcd PRIOR to executing the shell command. You can, however, pass
# them to any script being called as arguments.

# Enables the dynamic message routing logic.
# Dynamic message routing enables you to dynamically redirect messages
# to be received by stations other than the server would normally deliver
# them to (any station whose identity matches the "TO=" header in the
# message). Use this feature to implement custom message routing that
# doesn't entirely rely on the "TO=" header.
# To enable this feature, set the "msg_router/rpc/style" parameter to
# either "www-form" or "xmlrpc". This selects the style of remote
# procedure call the server performs to make a routing determination.
# The server doesn't cache any of the routing decisions, so it will
# you for every message it needs to make a routing decision about.
# When you enable dynamic routing, you will also need to specify at
# least the "msg_router/rpc/url" parameter to tell the server where
# it should send the RPC calls.
#
# msg_router/rpc/style = www-form|xmlrpc
# msg_router/rpc/url = https://example.com/msg_router.php
#
# When using dynamic routing, you will also want to pass some
# arguments about the message being routed in the remote call. You
# can do so by specifying up to 32 "msg_router/rpc/param/<N>"
# parameters, where "<N>" is a number from 0 to 31. The value of
# this parameter must be one of the following:
#	FROM - is the identity of the station which sent the message.
#	TO - is the identity of the normal intended
#		recipient of the message. This is derived either from
#		the message's "TO=" header, or from the LOGON target.
#	STATYPE - station type which sent the message, "ATC" or "ACFT".
#	CONNTYPE - connection type on which the message was received.
#		"WS" for a WebSocket, or "TLS" for a plain TLS socket.
#	ADDR - IP address and port of the machine which sent the message.
#		This uses the same format as "logon_list_file" addresses.
#	MSGTYPE - the type of message being routed. This is derived from
#		the first message segment and is either DMxxx or UMxxx
#		for downlink or uplink messages respectively (and the
#		appropriate message type number in 'xxx').
#	MIN - the CPDLC message identification number (MIN)
#	MRN - the CPDLC message response number (MRN)
# msg_router/rpc/param/[0..31] = FROM|TO|STATYPE|CONNTYPE|ADDR
#
# The server expects a single string value response that will be used
# for the message routing decision. If you do not wish the alter the
# destination of the message, simply return the same value as was the
# original "TO=" field.
#
# EXAMPLES:
#
#   Using the "www-form" RPC style:
#
#	Configuration:
#		msg_router/rpc/style = www-form
#		msg_router/rpc/url = https://example.com/msg_router.php
#		msg_router/rpc/param/0 = FROM
#		msg_router/rpc/param/1 = TO
#		msg_router/rpc/param/2 = STATYPE
#
#	What the server will send to you in the HTTP POST body:
#		FROM=N123AB&TO=KUSA&STATYPE=ACFT
#
#	Example of a valid response:
#		KZLA
#
#   Using the "xmlrpc" RPC style:
#
#	Configuration:
#		msg_router/rpc/style = xmlrpc
#		msg_router/rpc/url = https://example.com/msg_router.php
#		msg_router/rpc/methodName = router.getRoute
#		msg_router/rpc/param/0 = FROM
#		msg_router/rpc/param/1 = TO
#		msg_router/rpc/param/2 = STATYPE
#
#	What the server will send to you in the HTTP POST body:
#		<methodCall>
#		  <methodName>router.getRoute</methodName>
#		  <params>
#		    <param><value><string>N123AB</string></value></param>
#		    <param><value><string>KUSA</string></value></param>
#		    <param><value><string>ACFT</string></value></param>
#		  </params>
#		</methodCall>
#
#	Example of a valid response:
#		<methodResponse>
#		  <params>
#		    <param><value><string>KZOA</string></value></param>
#		  </params>
#		</methodResponse>

# msg_router/rpc/timeout = 10
# This sets the maximum RPC request timeout for the message router
# (in seconds). If the RPC host doesn't respond within this number of
# seconds (default: 10), cpdlcd will abort the RPC call and drop the
# message. Please note a timeout of 0 will disable request timeouts.
# That is probably not what you want, as it can tie up the router
# threads for a very long time (potentially indefinitely).

# The dynamic message router is multi-threaded to avoid bottlenecking
# message forwarding throughput by network latency to the RPC machine.
# These configuration parameters set up the server's thread pool to
# avoid excessive resource usage. While a thread exists, it will try
# to reuse its existing HTTPS connection to the RPC host to avoid
# incurring any extra overhead during TLS connection setup.
#
# msg_router/max_threads = 8
# This configures AT MOST how many threads the server may spawn in
# parallel while doing RPC routing requests (default: 8). If there
# are more routing requests in parallel than there are available
# threads, the server will queue up incoming messages, and route
# the messages when a worker thread becomes available (messages
# are handled in the same sequence as they were received).
#
# msg_router/min_threads = 0
# This configures AT LEAST how many threads the server should keep
# ready to handle RPC routing requests (default: 0). This can help
# avoid RPC latency delays on highly loaded servers by always
# maintaining a pool of ready-to-use RPC threads.
#
# msg_router/stop_delay = 2
# This sets the time delay (in seconds) how long a thread is
# allowed to sit idle before it is considered "unneeded" and will
# become a candidate to be shut down (default: 2 seconds). The
# server will not shutdown idle threads if it has reached its
# "min_threads" value.
#
# During development, you can specify "msg_router/rpc/debug = true".
# This will make cpdlcd dump the entire RPC response from the remote
# router to stdout for analysis.
