# This is a sample configuration file for cpdlcd. Feel free to modify
# as necessary to suit your needs.

# listen/tcp/<name> = hostname[:port]
#
# Defines a plain TCP listen interface. The "<name>" portion is any
# descriptive name you wish to use. Unless at least one TCP listen
# interface is defined, the default is to only listen on `localhost:17622'.
# The ":port" section is optional. Without it, the default TCP connection
# port of 17622 is used.
# To make the server listen on all hostnames, use "*" as the hostname.
# Example: listen/tcp/main = *

# listen/lws/<name> = interface[:port]
#
# Defines a libwebsocket listen interface. The "<name>" portion is any
# descriptive name you wish to use. Unless at least one LWS listen
# interface is defined, the default is to only listen on the loopback
# interface. Please note that unlike the `listen/tcp' directive, LWS
# needs a physical interface name instead of an IP hostname (e.g. "eth0").
# The ":port" section is optional. Without it, the default TCP connection
# port of 17622 is used.
# To make the server listen on all interfaces, use "*" as the interface.
# Example: listen/lws/main = *

# tls/keyfile = foo/cpdlcd_key.pem
#
# Defines the path to the server's private TLS key. The key must be stored
# in PEM format. It can be optionally encrypted, see the options below for
# how to deal with encrypted keys.
# If this directive is not provided, the key is assumed to be stored in
# a file named `cpdlcd_key.pem' in the current working directory.

# tls/keyfile_pass = DecryptionPassword
#
# Defines an optional private TLS key decryption password. If not specified,
# the TLS key is assumed to be stored unencrypted.

# tls/keyfile_enctype = PLAIN | 3DES | RC4 | ...
#
# Defines an optional private TLS key encryption type. If no `keyfile_pass'
# is set, this defaults to "PLAIN". If a `keyfile_pass' is set, the default
# value for the key encryption type is "AES256" (the default for OpenSSL).
# The full list of possible values is:
# "3DES" = PBES2/3DES
# "RC4" = PKCS12/ARCFOUR
# "AES128" = PBES2/AES128
# "AES192" = PBES2/AES192
# "AES256" = PBES2/AES256
# "PKCS12/3DES" = PKCS12/3DES

# tls/certfile = foo/cpdlcd_cert.pem
#
# Defines the path to the server's public TLS certificate. The certificate
# must be stored in PEM format. If this directive is not provided, the
# certificate is assumed to be stored in a file named `cpdlcd_cert.pem'
# in the current working directory.

# tls/cafile = foo/ca_cert.pem
#
# Defines the path to the CA certificate chain to send to connecting
# clients. If not specified, no CA certificates are sent to the client.
# The certificates must be stored in PEM format.

# tls/req_client_cert = true | false
#
# Sets whether the server requires client certificates. The default is
# "false". If client cerificates are used, they are checked against the
# CA certificate set in `tls/cafile' and optionally against the CRL set
# in `tls/crlfile'.

# tls/crlfile = foo/crl.list
#
# Defines the path to the certificate revocation list file. This is used
# when client certificates are in use to check for revoked certificates.
# If not specified, the CRL mechanism is not used.

# blocklist = foo/file.txt
#
# Defines the path to a file containing a list of IP addresses to be
# blocked by the server. The file is simply a sequence of IP addresses,
# one per line, with support for comments starting with a '#' character.
# This file is checked regularly for updates. If a change is detected
# to the file, the server re-reads it and drops any existing connections
# which are marked as blocked. Also, further connection attempts from
# these addresses are immediately dropped before even allowing a TLS
# handshake to commence.

# auth/url = https://hostname.com/auth_script
#
# Defines a remote authenticator URL. Whenever a LOGON attempt is
# received, the server contacts the remote authenticator to process
# the LOGON authentication request. If you want to use file-based
# authentication instead, see "FILE BASED AUTHENTICATION" below.
#
# cpdlcd sends an HTTP POST request to the authenticator with the
# following POST fields in URL-encoded form in the request body:
#	FROM=<ident>
#		The contents of the FROM= field in the original CPDLC LOGON
#		message. This will be the new identity assumed by the
#		connection if the LOGON succeeds.
#	TO=<ident>
#		If present, the contents of the TO= field. This will be the
#		new implicit target for all messages from the client if the
#		LOGON succeeds.
#	LOGON=<data>
#		The contents of the LOGON= field. Its meaning is to be
#		interpreted by the remote authenticator, the cpdlcd server
#		makes no assumptions about the data.
#	REMOTEADDR=<ipaddr>
#		The remote host IP address who sent the LOGON message. This
#		can either be an IPv4 address or an IPv6 address, depending
#		on how the remote host connected to the server. The server
#		makes no distinctions between plain TCP and LWS connections
#		for the purposes of authentication.
# The remote authenticator must then respond with a URL-encoded body
# containing the following fields:
#	AUTH=0|1
#		Defines whether the LOGON attempt was successful (1)
#		or whether the server should fail the LOGON attempt (0).
#	ATC=0|1
#		Provided that AUTH=1, this field tells the server whether
#		the client connection should be treated as the connection
#		from an ATC station (1) or an aircraft station (0). This
#		defines the permissible message sets from the client and
#		lets the server perform message flow logic checks.
#
# FILE BASED AUTHENTICATION
#
# If you want to use a local file to hold logon names & passwords, use
# the file:// URL method instead. E.g.
# auth/url = file://./test.userlist
# auth/url = file:///etc/cpdlcd/test.userlist
# See the file sample.userlist included in this repo for an example on
# how that file is to be structured.

# auth/cainfo = foo/cainfo.list
#
# Sets the path to the list of CAs that are used to verify the remote
# authenticator TLS certificate in case the `https' connection schema
# was used. This is a list of CA certificates stored in a single file
# in PEM format.
# If not set, the default behavior is to use the operating system's
# CA certificate store (e.g. "/usr/share/ca-certificates" on Linux and
# "/Library/Keychains/System.keychain" on macOS).

# auth/username = MyUserName
#
# Sets the HTTP basic authentication username in case this is required
# by the remote authenticator interface.

# auth/password = MyPassword
#
# Sets the HTTP basic authentication password in case this is required
# by the remote authenticator interface.

# msgqueue/max = 128m
#
# In case a message cannot be immediately forwarded to the intended
# recipient, it is held by the server in a memory queue. This sets the
# maximum size of the memory queue before any further attempts to queue
# a message are denied with an error. The value is set in bytes, but
# you can use the standard suffixes for muplipliers: 'k' = kilobytes,
# 'm' = megabytes, 'g' = gigabytes, 't' = terabytes, 'e' = exabytes and
# 'p' = petabytes.
# If not specified, the default value for this limit is 128MB. Specifying
# a value of 0 for this parameter disables the global message queue limit.

# msgqueue/quota = 128k
#
# Applies a per-client-ID message quota to the delayed message
# forwarding queue. This is only applied to aircraft stations, not
# ATC stations (ATC stations can queue as many messages as they want,
# up to the msgqueue/max value). If an aircraft stations attempts to
# queue more than the set quota, the message is rejected. Undelivered
# messages are dropped after 10 minutes.
# If not specified, the default value for the quota is 16kB.

# logon_list_file = logons.txt
#
# When specified, cpdlcd will maintain an up-to-date list of currently
# active LOGONs to the server. This file will be updated atomically when
# a LOGON or LOGOFF occurs. The file contains a 5-column table using a
# single tab as a separator between each column. Each value is guaranteed to
# be free of whitespace. The columns have the following meaning from left
# to right:
#	1) The FROM identity (callsign).
#	2) The TO identity (callsign). For ATC stations that do not logon
#	   to any station, this field will contain a single '-' character.
#	3) The station type. For aircraft stations, the value is "ACFT".
#	   For ATC stations, the value is "ATC".
#	4) The remote IP address and port:
#	   For IPv4 addresses, the format is: A.B.C.D:12345
#	   For IPv6 addresses, the format is: [AB:CD::EF]:12345
#	5) The connection transport type. For TLS over plain TCP, the
#	   value is "TLS". For WebSockets, the value is "WS".
# Example aircraft station logon over IPv6/TLS:
# N650CL	KUSA	ACFT	[::1]:45866	TLS
# Example ATC station logon over IPv4/TLS:
# KZOA	-	ATC	127.0.0.1:45870	TLS

# logon_cmd = <shell command>
# logoff_cmd = <shell command>
#
# When these values are defined, when a LOGON or LOGOFF occurs, cpdlcd
# fork()s and runs the string in this configuration stanza as follows:
# /bin/sh -c "<shell command>"
# This can be used to execute custom code as a callback and track LOGONs
# and LOGOFFs. cpdlcd will not wait for the command to complete. You can
# use following special variables in the <shell command> string to provide
# additional information to the shell command:
#	${FROM} - expands to the identifier of the station logging on or off
#	${TO} - expands to the identifier that the station is logging on to,
#		or logging off from. For ATC stations, this expands to "-".
#	${ADDR} - expands to the connection's remote IP address, using the
#		same format as in the "logon_list_file" option above.
#	${CONNTYPE} - expands to the type of station logging on or off.
#		This will be "ACFT" for aircraft or "ATC" for ATC stations.
# Please note that these are NOT shell variables, but are instead expanded
# by cpdlcd PRIOR to executing the shell command. You can, however, pass
# them to any script being called as arguments.
