#!/bin/bash

GMP=gmp-6.2.0
NETTLE=nettle-3.5
GNUTLS=gnutls-3.6.11.1
LWS=libwebsockets-3.1.0

UBUNTU_PACKAGES="build-essential cmake git libglu1-mesa-dev libgmp-dev \
libssl-dev m4 pkg-config unzip libgnutls28-dev libunistring-dev"
case $(uname) in
Linux)
	NCPUS=$(fgrep processor /proc/cpuinfo | wc -l)
	STATIC_LIB_OPTS="-static-libgcc -static-libstdc++"
	;;
Darwin)
	NCPUS=$(( $(sysctl -n hw.ncpu) + 1 ))
	STATIC_LIB_OPTS=""
	;;
esac

set -e

winbuild=0
do_clean=0
HOST_SUFFIX=""
if [[ "$(uname)" = Linux ]]; then
	ARCH="linux-64"
else
	ARCH="mac-64"
fi
while getopts "wcg:p:h" opt; do
	case $opt in
	w)
		winbuild=1
		HOST_SUFFIX="--host=x86_64-w64-mingw32"
		ARCH="win-64"
		;;
	c)
		do_clean=1
		;;
	g)
		DO_GUI="$OPTARG"
		;;
	p)
		INSTALL_PACKAGES="$OPTARG"
		;;
	h)
		cat << EOF
Usage: $0 [-wcgGpP]
    -w : build the submodule dependencies for a build targeting Windows
    -c : remove all and clean built dependencies to do a fresh rebuild later
    -g <y|n> : enable or disable building GUI dependencies.
	If this argument isn't provided, the script will prompt you.
    -p <y|n> : enable or disable installing Ubuntu packages.
	If this argument isn't provided, the script will prompt you.
EOF
		exit
		;;
	*)
		echo "Unrecognized argument $opt. Try \"$0 -h\" for help" >&2
		exit 1
		;;
	esac
done

if [[ "$do_clean" == 0 ]]; then
	if [ -n "$DO_GUI" ]; then
		REPLY="$DO_GUI"
	else
		echo -n "Would you like to build the GUI portions as well?" \
		    "[y/N] "
		read
	fi
	if [[ "$REPLY" == "y" ]] || [[ "$REPLY" == "Y" ]]; then
		BUILDGLFW=1
		TARGETS="cpdlcd and FANSgui"
		if [[ "$(uname)" = "Linux" ]]; then
			BUILDWIN=1
		else
			BUILDWIN=0
		fi
	else
		TARGETS="cpdlcd"
		BUILDGLFW=0
		BUILDWIN=0
	fi

	if [[ "$(uname)" = "Linux" ]]; then
		if apt show qt4-dev-tools &> /dev/null ; then
			UBUNTU_PACKAGES="$UBUNTU_PACKAGES qt4-qmake \
qt4-dev-tools"
		else
			UBUNTU_PACKAGES="$UBUNTU_PACKAGES qt5-qmake qt5-default"
		fi
	fi

	if [[ "$BUILDWIN" == 1 ]]; then
		UBUNTU_PACKAGES="$UBUNTU_PACKAGES autoconf automake libtool \
libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zip \
mingw-w64-x86-64-dev gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64"
	fi

	if [[ "$(uname)" = "Linux" ]]; then
		if [ -n "$INSTALL_PACKAGES" ]; then
			REPLY="$INSTALL_PACKAGES"
		else
			echo "---------------------------------------------------------------
The following packages are required to build $TARGETS:
  $UBUNTU_PACKAGES"
			echo -n "Would you like me to apt-get these for" \
			    "you now? [y/N] "
			read
		fi
		if [[ "$REPLY" == "y" ]] || [[ "$REPLY" == "Y" ]]; then
			sudo apt-get install $UBUNTU_PACKAGES
		fi
	fi
fi

# Check cmake version installed:
CMAKE_VERSION=$(cmake --version | awk '/cmake version /{print $3}')
CMAKE_VERSION_MAJOR=$(echo $CMAKE_VERSION | cut -d . -f 1)
if [ "$CMAKE_VERSION_MAJOR" -lt 3 ]; then
	cat << EOF
-----------------------------------------------------------
WARNING: your cmake appears to be too old ($CMAKE_VERSION).
libcpdlc requires at least cmake version 3.0.2. You can get a newer version
from the following PPA:
  sudo add-apt-repository ppa:george-edison55/cmake-3.x
  sudo apt-get update
  sudo apt-get install cmake
EOF
	echo -n "Would you like to continue anyway? [y/N] "
	read
	if [[ "$REPLY" != "y" ]] && [[ "$REPLY" != "Y" ]]; then
		exit 1
	fi
fi

# Refresh & build libacfutils
if ! [ -f libacfutils/build_deps ]; then
	git submodule init libacfutils && git submodule update libacfutils
fi

if [[ "$do_clean" == 0 ]]; then
	if [[ "$(uname)" = "Linux" ]]; then
		ACFUTILS_BUILD_SCRIPT="./build-win-lin"
		NATIVE_FILE="libacfutils/qmake/lin64/libacfutils.a"
		CROSS_FILE="libacfutils/qmake/lin64/libacfutils.a"
		if [[ "$BUILDWIN" == 0 ]]; then
			MINIMAL=""
		else
			MINIMAL="-m"
		fi
	else
		ACFUTILS_BUILD_SCRIPT="./build-mac"
		NATIVE_FILE="libacfutils/qmake/mac64/libacfutils.a"
	fi
	if [[ "$BUILDWIN" == 0 ]]; then
		if ! [ -f "$NATIVE_FILE" ]; then
		    (
			cd libacfutils && ./build_deps $MINIMAL && \
			    cd qmake && "${ACFUTILS_BUILD_SCRIPT}" -ilE
		    ) || exit 1
		fi
	else
		if ! [ -f "$NATIVE_FILE" ] || ! [ -f "$CROSS_FILE" ]; then
		    (
			cd libacfutils && ./build_deps && cd qmake && \
			    "${ACFUTILS_BUILD_SCRIPT}" -E
		    ) || exit 1
		fi
	fi
else
	( cd libacfutils && ./build_deps -c && \
	    rm -rf qmake/win64 qmake/lin64 qmake/mac64 )
fi
if [[ "$BUILDGLFW" == 1 ]]; then
	( cd libacfutils/glfw && ./build_glfw_deps ) || exit 1
fi

if [[ "$do_clean" == 0 ]]; then
	[ -d "${LWS}" ] || tar xJf "${LWS}.tar.xz"
	if ! [ -f "${LWS}/lib/libwebsockets.a" ]; then
	    (
		cd "${LWS}" && \
		cmake . \
		    -DLWS_OPENSSL_LIBRARIES="$(pwd)/../libacfutils/ssl/openssl-$ARCH/lib" \
		    -DLWS_OPENSSL_INCLUDE_DIRS="$(pwd)/../libacfutils/ssl/openssl-$ARCH/include" \
		    -DLWS_WITH_SHARED=OFF \
		    -DLWS_WITHOUT_TESTAPPS=ON \
		    -DLWS_WITHOUT_TEST_SERVER=ON \
		    -DLWS_WITHOUT_TEST_SERVER_EXTPOLL=ON \
		    -DLWS_WITHOUT_TEST_PING=ON \
		    -DLWS_WITHOUT_TEST_CLIENT=ON && \
		make -j ${NCPUS}
	    ) || exit 1
	fi
else
	echo rm -rf "${LWS}"
	rm -rf "${LWS}"
fi

if [[ "$do_clean" = 0 ]]; then
	[ -d "${GMP}" ] || tar xJf "${GMP}.tar.xz"
	if ! [ -f "${GMP}/install_tgt/lib/pkgconfig/gmp.pc" ]; then
	    (
		cd "${GMP}" && \
		./configure --enable-static --disable-shared \
		    --disable-shared --enable-static \
		    --prefix="$(pwd)/install_tgt" $HOST_SUFFIX && \
		make -j ${NCPUS} && make install
	    ) || exit 1
	fi
else
	echo rm -rf "${GMP}"
	rm -rf "${GMP}"
fi

if [[ "$do_clean" = 0 ]]; then
	[ -d "${NETTLE}" ] || tar xJf "${NETTLE}.tar.xz"
	if ! [ -f "${NETTLE}/install_tgt/lib/pkgconfig/nettle.pc" ] &&
	    ! [ -f "${NETTLE}/install_tgt/lib64/pkgconfig/nettle.pc" ]; then
	    (
		cd "${NETTLE}" && \
		LDFLAGS="$STATIC_LIB_OPTS" \
		./configure --enable-mini-gmp \
		    --disable-shared --enable-static \
		    --prefix="$(pwd)/install_tgt" $HOST_SUFFIX && \
		make -j ${NCPUS} && make install
	    ) || exit 1
	fi
else
	echo rm -rf "${NETTLE}"
	rm -rf "${NETTLE}"
fi

if [[ "$do_clean" == 0 ]]; then
	[ -d "${GNUTLS}" ] || tar xJf "${GNUTLS}.tar.xz"
	if ! [ -f "${GNUTLS}/install_tgt/lib/pkgconfig/gnutls.pc" ]; then
	    (
		NETTLE_PKG_CONFIG_PATH="../${NETTLE}/install_tgt/lib/pkgconfig:../${NETTLE}/install_tgt/lib64/pkgconfig"
		GMP_PKG_CONFIG_PATH="../${GMP}/install_tgt/lib/pkgconfig"
		cd "${GNUTLS}" && \
		LIBS="$STATC_LIB_OPTS" \
		GMP_CFLAGS="$(PKG_CONFIG_PATH=$GMP_PKG_CONFIG_PATH pkg-config --cflags gmp)" \
		GMP_LIBS="$(PKG_CONFIG_PATH=$GMP_PKG_CONFIG_PATH pkg-config --libs gmp)" \
		HOGWEED_CFLAGS="$(PKG_CONFIG_PATH=$NETTLE_PKG_CONFIG_PATH pkg-config --cflags hogweed)" \
		HOGWEED_LIBS="$(PKG_CONFIG_PATH=$NETTLE_PKG_CONFIG_PATH pkg-config --libs hogweed)" \
		NETTLE_CFLAGS="$(PKG_CONFIG_PATH=$NETTLE_PKG_CONFIG_PATH pkg-config --cflags nettle)" \
		NETTLE_LIBS="$(PKG_CONFIG_PATH=$NETTLE_PKG_CONFIG_PATH pkg-config --libs nettle)" \
		./configure --prefix="$(pwd)/install_tgt" \
		    --enable-static --disable-shared \
		    --with-included-libtasn1 --with-pic \
		    --with-included-unistring --without-p11-kit --disable-doc \
		    --disable-tools --disable-cxx --disable-tests $HOST_SUFFIX && \
		make -j ${NCPUS} && make install
	    ) || exit 1
	fi
else
	echo rm -rf "${GNUTLS}"
	rm -rf "${GNUTLS}"
fi

if [[ "$do_clean" == 0 ]]; then
	echo "---------------------------------------------------------
ALL DONE! You can now 'cd' into 'cpdlcd' and type 'make'.
---------------------------------------------------------"
fi
