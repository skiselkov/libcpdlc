#!/bin/bash

GMP=gmp-6.2.0
NETTLE=nettle-3.5
GNUTLS=gnutls-3.6.11.1
LWS=libwebsockets-3.1.0

UBUNTU_PACKAGES="build-essential cmake git libglu1-mesa-dev libgmp-dev \
libssl-dev m4 pkg-config qt4-qmake qt4-dev-tools unzip"
NCPUS=$(fgrep processor /proc/cpuinfo  | wc -l)

set -e

winbuild=0
HOST_SUFFIX=""
while getopts "w" opt; do
	case $opt in
	w)
		winbuild=1
		HOST_SUFFIX="--host=x86_64-w64-mingw32"
		;;
	esac
done

echo -n "Would you like to build the GUI portions as well? [y/N] "
read
if [[ "$REPLY" == "y" ]] || [[ "$REPLY" == "Y" ]]; then
	BUILDGLFW=1
	BUILDWIN=1
else
	BUILDGLFW=0
	BUILDWIN=0
fi

if [[ "$BUILDWIN" == 1 ]]; then
	UBUNTU_PACKAGES="$UBUNTU_PACKAGES autoconf automake libtool \
libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev zip \
mingw-w64-x86-64-dev gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64"
fi

echo "---------------------------------------------------------------
The following packages are required to build cpdlcd and fansgui:
  $UBUNTU_PACKAGES"
echo -n "Would you like me to apt-get these for you now? [y/N] "
read
if [[ "$REPLY" == "y" ]] || [[ "$REPLY" == "Y" ]]; then
	sudo apt-get install $UBUNTU_PACKAGES
fi

# Check cmake version installed:
CMAKE_VERSION=$(cmake --version | awk '/cmake version /{print $3}')
CMAKE_VERSION_MAJOR=$(echo $CMAKE_VERSION | cut -d . -f 1)
if [ "$CMAKE_VERSION_MAJOR" -lt 3 ]; then
	cat << EOF
-----------------------------------------------------------
WARNING: your cmake appears to be too old ($CMAKE_VERSION).
libcpdlc requires at least cmake version 3.0.2. You can get a newer version
from the following PPA:
  sudo add-apt-repository ppa:george-edison55/cmake-3.x
  sudo apt-get update
  sudo apt-get install cmake
EOF
	echo -n "Would you like to continue anyway? [y/N] "
	read
	if [[ "$REPLY" != "y" ]] && [[ "$REPLY" != "Y" ]]; then
		exit 1
	fi
fi

# Refresh & build libacfutils
if ! [ -f libacfutils/build_deps ]; then
	git submodule init libacfutils && git submodule update libacfutils
fi

if [[ "$BUILDWIN" == 0 ]]; then
	if ! [ -f "libacfutils/qmake/lin64/libacfutils.a" ]; then
		(
		    cd libacfutils && ./build_deps -m && cd qmake && \
		    ./build-win-lin -ilE
		) || exit 1
	fi
else
	if ! [ -f "libacfutils/qmake/lin64/libacfutils.a" ] ||
	    ! [ -f "libacfutils/qmake/win64/libacfutils.a" ]; then
		(
		    cd libacfutils && ./build_deps && cd qmake && \
		    ./build-win-lin -E
		) || exit 1
	fi
fi
if [[ "$BUILDGLFW" == 1 ]]; then
	( cd libacfutils/glfw && ./build_glfw_deps ) || exit 1
fi

[ -d "${LWS}" ] || tar xJf "${LWS}.tar.xz"
if ! [ -f "${LWS}/lib/libwebsockets.a" ]; then
	(
	    cd "${LWS}" && \
		cmake . && \
		make -j ${NCPUS}
	) || exit 1
fi

[ -d "${GMP}" ] || tar xJf "${GMP}.tar.xz"
if ! [ -f "${GMP}/install/lib/libgmp.a" ]; then
	(
	    cd "${GMP}" && \
		./configure --enable-static --disable-shared \
		    --prefix="$(pwd)/install" $HOST_SUFFIX && \
		make -j ${NCPUS} && make install
	) || exit 1
fi

[ -d "${NETTLE}" ] || tar xJf "${NETTLE}.tar.xz"
if ! [ -f "${NETTLE}/install/bin/libnettle-7.dll" ]; then
	(
	    cd "${NETTLE}" && \
		LDFLAGS="-static-libgcc -static-libstdc++" \
		./configure --enable-mini-gmp \
		--prefix="$(pwd)/install" $HOST_SUFFIX && \
		make -j ${NCPUS} && make install
	) || exit 1
fi

[ -d "${GNUTLS}" ] || tar xJf "${GNUTLS}.tar.xz"
if ! [ -f "${GNUTLS}/install/bin/libgnutls-30.dll" ]; then
	(
	    cd "${GNUTLS}" && \
		LIBS="-static-libgcc -static-libstdc++" \
		GMP_CFLAGS="$(PKG_CONFIG_PATH=../${GMP}/install/lib/pkgconfig pkg-config --cflags gmp)" \
		GMP_LIBS="$(PKG_CONFIG_PATH=../${GMP}/install/lib/pkgconfig pkg-config --libs gmp)" \
		HOGWEED_CFLAGS="$(PKG_CONFIG_PATH=../${NETTLE}/install/lib/pkgconfig pkg-config --cflags hogweed)" \
		HOGWEED_LIBS="$(PKG_CONFIG_PATH=../${NETTLE}/install/lib/pkgconfig pkg-config --libs hogweed)" \
		NETTLE_CFLAGS="$(PKG_CONFIG_PATH=../${NETTLE}/install/lib/pkgconfig pkg-config --cflags nettle)" \
		NETTLE_LIBS="$(PKG_CONFIG_PATH=../${NETTLE}/install/lib/pkgconfig pkg-config --libs nettle)" \
		./configure --prefix="$(pwd)/install" \
		--with-included-libtasn1 --with-pic \
		--with-included-unistring --without-p11-kit --disable-doc \
		--disable-tools --disable-cxx --disable-tests $HOST_SUFFIX &&
		make -j ${NCPUS} && make install
	) || exit 1
fi

echo "---------------------------------------------------------
ALL DONE! You can now 'cd' into 'cpdlcd' and type 'make'.
---------------------------------------------------------"
